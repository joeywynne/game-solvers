[11:55:20.437021] INFO     The square at (2, 5) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.454523] INFO     The square at (3, 4) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.461181] INFO     The square at (0, 5) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.467816] INFO     The square at (1, 5) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.476190] INFO     The square at (3, 6) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.490181] INFO     The square at (4, 2) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.502751] INFO     The square at (4, 4) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.508844] INFO     The square at (0, 3) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.516247] INFO     The square at (1, 3) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.520583] INFO     The square at (0, 1) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.526467] INFO     The square at (2, 3) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.533974] INFO     The square at (3, 2) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.541796] INFO     The square at (4, 6) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.549957] INFO     The square at (5, 3) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.557580] INFO     The square at (5, 5) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.565910] INFO     The square at (6, 2) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.573325] INFO     The square at (6, 3) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.581900] INFO     The square at (6, 5) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.590888] INFO     The square at (7, 3) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.593513] INFO     Only one available spot found for shape number 0 with coordinates (6, 4). Placing a tree.     tree_logic_solver.py:84
[11:55:20.596179] INFO     Only one available spot found for shape number 3 with coordinates (7, 6). Placing a tree.     tree_logic_solver.py:84
[11:55:20.599030] INFO     The square at (0, 2) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.601968] INFO     The square at (1, 2) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.607605] INFO     The square at (5, 1) would block shapes if it was a tree. Placing a dash                     tree_logic_solver.py:113
[11:55:20.619148] INFO     Only one available spot found for row number 1 with coordinates (1, 7). Placing a tree.       tree_logic_solver.py:69
[11:55:20.621853] INFO     Only one available spot found for row number 5 with coordinates (5, 2). Placing a tree.       tree_logic_solver.py:69
[11:55:20.624093] INFO     Only one available spot found for row number 2 with coordinates (2, 1). Placing a tree.       tree_logic_solver.py:69
[11:55:20.626240] INFO     Only one available spot found for row number 4 with coordinates (4, 5). Placing a tree.       tree_logic_solver.py:69
[11:55:20.628344] INFO     Only one available spot found for row number 3 with coordinates (3, 3). Placing a tree.       tree_logic_solver.py:69
Solved
[[Square(shape_id=np.int64(4), coords=(0, 0), symbol_id=2)
  Square(shape_id=np.int64(6), coords=(0, 1), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(0, 2), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(0, 3), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(0, 4), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(0, 5), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(0, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(0, 7), symbol_id=1)]
 [Square(shape_id=np.int64(4), coords=(1, 0), symbol_id=1)
  Square(shape_id=np.int64(7), coords=(1, 1), symbol_id=1)
  Square(shape_id=np.int64(7), coords=(1, 2), symbol_id=1)
  Square(shape_id=np.int64(7), coords=(1, 3), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(1, 4), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(1, 5), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(1, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(1, 7), symbol_id=2)]
 [Square(shape_id=np.int64(4), coords=(2, 0), symbol_id=1)
  Square(shape_id=np.int64(7), coords=(2, 1), symbol_id=2)
  Square(shape_id=np.int64(1), coords=(2, 2), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(2, 3), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(2, 4), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(2, 5), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(2, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(2, 7), symbol_id=1)]
 [Square(shape_id=np.int64(4), coords=(3, 0), symbol_id=1)
  Square(shape_id=np.int64(7), coords=(3, 1), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(3, 2), symbol_id=1)
  Square(shape_id=np.int64(2), coords=(3, 3), symbol_id=2)
  Square(shape_id=np.int64(5), coords=(3, 4), symbol_id=1)
  Square(shape_id=np.int64(5), coords=(3, 5), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(3, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(3, 7), symbol_id=1)]
 [Square(shape_id=np.int64(4), coords=(4, 0), symbol_id=1)
  Square(shape_id=np.int64(7), coords=(4, 1), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(4, 2), symbol_id=1)
  Square(shape_id=np.int64(2), coords=(4, 3), symbol_id=1)
  Square(shape_id=np.int64(2), coords=(4, 4), symbol_id=1)
  Square(shape_id=np.int64(5), coords=(4, 5), symbol_id=2)
  Square(shape_id=np.int64(1), coords=(4, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(4, 7), symbol_id=1)]
 [Square(shape_id=np.int64(4), coords=(5, 0), symbol_id=1)
  Square(shape_id=np.int64(4), coords=(5, 1), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(5, 2), symbol_id=2)
  Square(shape_id=np.int64(1), coords=(5, 3), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(5, 4), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(5, 5), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(5, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(5, 7), symbol_id=1)]
 [Square(shape_id=np.int64(4), coords=(6, 0), symbol_id=1)
  Square(shape_id=np.int64(4), coords=(6, 1), symbol_id=1)
  Square(shape_id=np.int64(4), coords=(6, 2), symbol_id=1)
  Square(shape_id=np.int64(0), coords=(6, 3), symbol_id=1)
  Square(shape_id=np.int64(0), coords=(6, 4), symbol_id=2)
  Square(shape_id=np.int64(3), coords=(6, 5), symbol_id=1)
  Square(shape_id=np.int64(3), coords=(6, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(6, 7), symbol_id=1)]
 [Square(shape_id=np.int64(4), coords=(7, 0), symbol_id=1)
  Square(shape_id=np.int64(4), coords=(7, 1), symbol_id=1)
  Square(shape_id=np.int64(4), coords=(7, 2), symbol_id=1)
  Square(shape_id=np.int64(0), coords=(7, 3), symbol_id=1)
  Square(shape_id=np.int64(3), coords=(7, 4), symbol_id=1)
  Square(shape_id=np.int64(3), coords=(7, 5), symbol_id=1)
  Square(shape_id=np.int64(3), coords=(7, 6), symbol_id=2)
  Square(shape_id=np.int64(6), coords=(7, 7), symbol_id=1)]]
False
board state [[Square(shape_id=np.int64(4), coords=(0, 0), symbol_id=2)
  Square(shape_id=np.int64(6), coords=(0, 1), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(0, 2), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(0, 3), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(0, 4), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(0, 5), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(0, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(0, 7), symbol_id=1)]
 [Square(shape_id=np.int64(4), coords=(1, 0), symbol_id=1)
  Square(shape_id=np.int64(7), coords=(1, 1), symbol_id=1)
  Square(shape_id=np.int64(7), coords=(1, 2), symbol_id=1)
  Square(shape_id=np.int64(7), coords=(1, 3), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(1, 4), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(1, 5), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(1, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(1, 7), symbol_id=2)]
 [Square(shape_id=np.int64(4), coords=(2, 0), symbol_id=1)
  Square(shape_id=np.int64(7), coords=(2, 1), symbol_id=2)
  Square(shape_id=np.int64(1), coords=(2, 2), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(2, 3), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(2, 4), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(2, 5), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(2, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(2, 7), symbol_id=1)]
 [Square(shape_id=np.int64(4), coords=(3, 0), symbol_id=1)
  Square(shape_id=np.int64(7), coords=(3, 1), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(3, 2), symbol_id=1)
  Square(shape_id=np.int64(2), coords=(3, 3), symbol_id=2)
  Square(shape_id=np.int64(5), coords=(3, 4), symbol_id=1)
  Square(shape_id=np.int64(5), coords=(3, 5), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(3, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(3, 7), symbol_id=1)]
 [Square(shape_id=np.int64(4), coords=(4, 0), symbol_id=1)
  Square(shape_id=np.int64(7), coords=(4, 1), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(4, 2), symbol_id=1)
  Square(shape_id=np.int64(2), coords=(4, 3), symbol_id=1)
  Square(shape_id=np.int64(2), coords=(4, 4), symbol_id=1)
  Square(shape_id=np.int64(5), coords=(4, 5), symbol_id=2)
  Square(shape_id=np.int64(1), coords=(4, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(4, 7), symbol_id=1)]
 [Square(shape_id=np.int64(4), coords=(5, 0), symbol_id=1)
  Square(shape_id=np.int64(4), coords=(5, 1), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(5, 2), symbol_id=2)
  Square(shape_id=np.int64(1), coords=(5, 3), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(5, 4), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(5, 5), symbol_id=1)
  Square(shape_id=np.int64(1), coords=(5, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(5, 7), symbol_id=1)]
 [Square(shape_id=np.int64(4), coords=(6, 0), symbol_id=1)
  Square(shape_id=np.int64(4), coords=(6, 1), symbol_id=1)
  Square(shape_id=np.int64(4), coords=(6, 2), symbol_id=1)
  Square(shape_id=np.int64(0), coords=(6, 3), symbol_id=1)
  Square(shape_id=np.int64(0), coords=(6, 4), symbol_id=2)
  Square(shape_id=np.int64(3), coords=(6, 5), symbol_id=1)
  Square(shape_id=np.int64(3), coords=(6, 6), symbol_id=1)
  Square(shape_id=np.int64(6), coords=(6, 7), symbol_id=1)]
 [Square(shape_id=np.int64(4), coords=(7, 0), symbol_id=1)
  Square(shape_id=np.int64(4), coords=(7, 1), symbol_id=1)
  Square(shape_id=np.int64(4), coords=(7, 2), symbol_id=1)
  Square(shape_id=np.int64(0), coords=(7, 3), symbol_id=1)
  Square(shape_id=np.int64(3), coords=(7, 4), symbol_id=1)
  Square(shape_id=np.int64(3), coords=(7, 5), symbol_id=1)
  Square(shape_id=np.int64(3), coords=(7, 6), symbol_id=2)
  Square(shape_id=np.int64(6), coords=(7, 7), symbol_id=1)]]
